#! /usr/bin/python
# -*- coding: utf-8 -*-
#
# bin/make-dist-tarball
# Part of ‘python-daemon’, an implementation of PEP 3143.
#
# Copyright © 2007–2014 Ben Finney <ben+python@benfinney.id.au>
#
# This is free software: you may copy, modify, and/or distribute this work
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; version 3 of that license or any later version.
# No warranty expressed or implied. See the file ‘LICENSE.GPL-3’ for details.

""" Create the distribution tarball from VCS. """

from __future__ import unicode_literals

import os
import sys
import tempfile
import shutil
import tarfile

import bzrlib
import bzrlib.workingtree
import bzrlib.export
from bzrlib import version_info_formats
import bzrlib.plugin
bzrlib.plugin.load_plugins()

workingtree = bzrlib.workingtree.WorkingTree.open_containing()[0]
sys.path.insert(1, workingtree.basedir)

dist_name = "python-daemon"


fromlist_expects_type = str
if sys.version_info < (3, 0):
    fromlist_expects_type = bytes


branch = workingtree.branch
revision_tree = branch.basis_tree()


def get_generated_version_info_content():
    """ Return the generated version-info file, or None. """

    content = None

    version_info_file_temp = tempfile.NamedTemporaryFile()
    info_format = version_info_formats.format_registry.get("python")
    info_builder = info_format(workingtree.branch)
    info_builder.generate(version_info_file_temp)

    version_info_file_temp.seek(0)
    content = version_info_file_temp.read()
    version_info_file_temp.close()

    return content


def get_existing_version_info_content(infile_path):
    """ Return the content of the existing version-info file, or None. """

    content = None

    try:
        infile = open(infile_path, 'r')
        content = infile.read()
    except IOError:
        pass

    return content


def update_version_info_file_if_needed(outfile_path):
    """ Update the version-info file iff it is out of date. """

    generated_content = get_generated_version_info_content()
    existing_content = get_existing_version_info_content(outfile_path)

    if generated_content is not None:
        if generated_content != existing_content:
            outfile = open(outfile_path, 'w+')
            outfile.write(generated_content)
            outfile.close()


package_name = "daemon"
version_info_file_relpath = os.path.join(
        package_name, "_version_info.py")
version_info_file_path = os.path.join(
        workingtree.basedir, version_info_file_relpath)

update_version_info_file_if_needed(version_info_file_path)

package_module_fromlist = list(map(fromlist_expects_type, [
        '_metadata']))
package_module = __import__(package_name, fromlist=package_module_fromlist)
metadata = package_module._metadata


version_string_filename = "VERSION"
version_string_file = open(
        os.path.join(workingtree.basedir, version_string_filename), 'r')
version_string = version_string_file.read().strip()

export_dir_name = "%(dist_name)s-%(version_string)s" % vars()
export_root_dir = tempfile.mkdtemp()
export_dir_path = os.path.join(export_root_dir, export_dir_name)
bzrlib.export.export(revision_tree, export_dir_path, format="dir")

version_info_file_export = os.path.join(
        export_dir_path, version_info_file_relpath)
shutil.copy(version_info_file_path, version_info_file_export)

# This program won't work outside the VCS branch; exclude it from the export.
this_program_export = os.path.join(
        export_dir_path, "bin", "make-dist-tarball")
os.remove(this_program_export)


def make_dist_tarball(tarball_path, tree_root):
    """ Create a named tarball from the specified directory tree. """

    save_curdir = os.path.abspath(os.path.curdir)

    tarball = tarfile.TarFile.gzopen(tarball_path, 'w')
    os.chdir(tree_root)
    tarball.add(export_dir_name)
    tarball.close()

    os.chdir(save_curdir)

tarball_suffix = ".tar.gz"
tarball_name = "%(export_dir_name)s%(tarball_suffix)s" % vars()
parent_dir = os.path.dirname(os.path.abspath(os.path.curdir))
tarball_path = os.path.join(parent_dir, tarball_name)
make_dist_tarball(tarball_path, export_root_dir)


shutil.rmtree(export_root_dir)


# Local variables:
# coding: utf-8
# mode: python
# End:
# vim: fileencoding=utf-8 filetype=python :
